# GitHub Copilot Setup Guide for Crypto Trading Bot
# ================================================
# This guide helps developers set up and use GitHub Copilot effectively 
# with this machine learning-based cryptocurrency trading bot project.

project_info:
  name: "Crypto Trading Bot with ML"
  type: "Python Machine Learning Trading System"
  frameworks:
    - "TensorFlow/Keras (LSTM models)"
    - "XGBoost (Gradient boosting)"
    - "Pandas/NumPy (Data processing)"
    - "AsyncIO (Real-time trading)"
    - "WebSocket (Live data feeds)"
  
setup_steps:
  
  1_prerequisites:
    title: "Prerequisites and Environment Setup"
    description: "Essential setup before using Copilot with this project"
    steps:
      - action: "Install Python 3.8+ and pip"
        details: "This project requires Python 3.8 or higher for ML dependencies"
      
      - action: "Create virtual environment"
        command: |
          python -m venv venv
          # Windows: venv\Scripts\activate
          # Linux/Mac: source venv/bin/activate
      
      - action: "Install project dependencies"
        command: |
          pip install -r requirements.txt
          pip install -r requirements_paper_trader.txt
      
      - action: "Setup environment variables"
        details: "Copy .env.example to .env and configure API keys"
        file: ".env"
        required_vars:
          - "BITVAVO_API_KEY"
          - "BITVAVO_API_SECRET" 
          - "TELEGRAM_BOT_TOKEN"
          - "TELEGRAM_CHAT_ID"

  2_copilot_installation:
    title: "GitHub Copilot Installation and Setup"
    steps:
      - action: "Install GitHub Copilot extension"
        vscode: "ms-vscode.vscode-github-copilot"
        jetbrains: "Search 'GitHub Copilot' in plugins"
        vim: "Install copilot.vim plugin"
      
      - action: "Authenticate with GitHub"
        command: "Follow extension prompts to sign in"
      
      - action: "Configure Copilot settings"
        vscode_settings: |
          {
            "github.copilot.enable": {
              "*": true,
              "yaml": true,
              "plaintext": false,
              "markdown": true,
              "python": true
            },
            "github.copilot.inlineSuggest.enable": true,
            "github.copilot.suggestions.count": 3
          }

  3_project_configuration:
    title: "Project-Specific Copilot Configuration"
    steps:
      - action: "Create .gitignore entries for Copilot"
        details: "Ensure sensitive data isn't included in suggestions"
        add_to_gitignore:
          - "*.env*"
          - "*.log"
          - "models/*.pkl"
          - "models/*.h5"
          - "data/*.csv"
      
      - action: "Setup workspace settings"
        file: ".vscode/settings.json"
        content: |
          {
            "python.defaultInterpreterPath": "./venv/bin/python",
            "python.analysis.extraPaths": ["./paper_trader"],
            "github.copilot.advanced": {
              "length": 500,
              "temperature": 0.1,
              "top_p": 1,
              "debug.overrideEngine": "codex"
            }
          }

  4_effective_prompting:
    title: "Effective Prompting Strategies for This Project"
    context_guidelines:
      - "Always specify the component you're working on (data/, models/, strategy/, etc.)"
      - "Include trading context (paper trading, risk management, ML predictions)"
      - "Mention specific technologies (asyncio, websockets, pandas, tensorflow)"
    
    prompt_templates:
      data_collection:
        example: "# Create an async function to collect 1-minute OHLCV data from Bitvavo WebSocket"
        context: "Working with real-time cryptocurrency data feeds"
      
      ml_model_integration:
        example: "# Load LSTM and XGBoost models for BTC-EUR price prediction with error handling"
        context: "Ensemble ML models for trading signals"
      
      trading_strategy:
        example: "# Implement risk management with 1% stop loss and trailing stop functionality"
        context: "Paper trading with position management"
      
      feature_engineering:
        example: "# Calculate technical indicators (RSI, MACD, Bollinger Bands) for trading features"
        context: "Financial time series analysis"
      
      async_trading:
        example: "# Create async trading loop with 1-minute intervals and error recovery"
        context: "Real-time trading system with asyncio"

  5_code_patterns:
    title: "Common Code Patterns and Conventions"
    patterns:
      error_handling:
        description: "Comprehensive error handling for trading systems"
        example: |
          try:
              # Trading operation
              pass
          except Exception as e:
              self.logger.error(f"Trading error: {e}")
              await self.telegram_notifier.send_error(str(e))
              return False
      
      logging:
        description: "Structured logging for trading events"
        example: |
          self.logger.info(f"Position opened: {symbol} {side} {size} @ {price}")
          self.logger.warning(f"Risk threshold exceeded for {symbol}")
      
      async_patterns:
        description: "Async/await patterns for real-time data"
        example: |
          async def collect_data(self):
              while self.running:
                  try:
                      data = await self.get_market_data()
                      await self.process_data(data)
                  except Exception as e:
                      await asyncio.sleep(5)  # Retry delay
      
      config_access:
        description: "Configuration access pattern"
        example: |
          # Use self.settings for configuration
          max_positions = self.settings.max_positions
          stop_loss_pct = self.settings.stop_loss_pct

  6_intelligent_completions:
    title: "Optimize Copilot for Trading Bot Development"
    tips:
      - tip: "Use descriptive variable names"
        reason: "Helps Copilot understand trading context"
        example: "current_btc_price, rsi_signal, position_size"
      
      - tip: "Write function docstrings first"
        reason: "Copilot uses docstrings for better completions"
        example: |
          def calculate_position_size(self, signal_strength: float, volatility: float) -> float:
              """Calculate position size based on signal strength and market volatility.
              
              Args:
                  signal_strength: ML model confidence (0.0-1.0)
                  volatility: Market volatility indicator (0.0-1.0)
              
              Returns:
                  Position size as percentage of portfolio (0.0-1.0)
              """
      
      - tip: "Include type hints"
        reason: "Improves Copilot's understanding of data structures"
        example: "from typing import Dict, List, Optional, Tuple"
      
      - tip: "Use domain-specific comments"
        reason: "Trading terminology helps generate relevant code"
        example: "# Calculate Sharpe ratio for strategy performance"

  7_testing_with_copilot:
    title: "Writing Tests with Copilot Assistance"
    approach:
      - "Start with test function names that describe the scenario"
      - "Use pytest fixtures for trading data setup"
      - "Mock external APIs (Bitvavo, Telegram) in tests"
    
    test_patterns:
      unit_test_example: |
        def test_signal_generator_bullish_pattern():
            """Test signal generation for bullish market pattern."""
            # Copilot will suggest appropriate test implementation
      
      integration_test_example: |
        @pytest.mark.asyncio
        async def test_paper_trading_full_cycle():
            """Test complete paper trading cycle from signal to exit."""
            # Copilot will suggest async test patterns

  8_copilot_shortcuts:
    title: "Useful Copilot Keyboard Shortcuts"
    shortcuts:
      accept_suggestion: "Tab"
      reject_suggestion: "Esc"
      next_suggestion: "Alt + ]"
      previous_suggestion: "Alt + ["
      open_copilot_panel: "Ctrl + Shift + A"
      manual_trigger: "Alt + \\"

usage_examples:
  
  example_1:
    title: "Creating a New Trading Strategy"
    steps:
      - "Create new file in paper_trader/strategy/"
      - "Start with descriptive class name and docstring"
      - "Let Copilot suggest method implementations"
    prompt: |
      class MeanReversionStrategy:
          """Mean reversion trading strategy using Bollinger Bands and RSI."""
    
  example_2:
    title: "Adding New Technical Indicators"
    steps:
      - "Open paper_trader/models/feature_engineer.py"
      - "Add comment describing the indicator"
      - "Let Copilot suggest the calculation"
    prompt: |
      def calculate_williams_r(self, df: pd.DataFrame, period: int = 14) -> pd.Series:
          """Calculate Williams %R oscillator for momentum analysis."""

  example_3:
    title: "Implementing Risk Management"
    steps:
      - "Define risk parameters in comments"
      - "Let Copilot suggest implementation"
    prompt: |
      def check_risk_limits(self, symbol: str, position_size: float) -> bool:
          """Check if new position violates risk management rules."""

best_practices:
  
  security:
    - "Never commit API keys or secrets"
    - "Use environment variables for sensitive data"
    - "Review Copilot suggestions for hardcoded credentials"
  
  code_quality:
    - "Add type hints to improve suggestions"
    - "Write clear docstrings and comments"
    - "Use meaningful variable names"
    - "Follow project naming conventions"
  
  trading_specific:
    - "Always include error handling for API calls"
    - "Implement proper logging for audit trails"
    - "Use decimal or float precision for financial calculations"
    - "Include position sizing and risk management"

troubleshooting:
  
  common_issues:
    - issue: "Copilot not suggesting trading-specific code"
      solution: "Add more domain context in comments and function names"
    
    - issue: "Suggestions don't match project structure"
      solution: "Ensure imports and class references are correct"
    
    - issue: "AsyncIO patterns not suggested correctly"
      solution: "Include 'async' and 'await' keywords in comments"

  debugging_copilot:
    - "Check Copilot status in VS Code status bar"
    - "Restart Copilot service if suggestions stop"
    - "Clear Copilot cache if getting stale suggestions"
    - "Check internet connection for cloud-based suggestions"

implementation_checklist:
  pre_development:
    - "[ ] Virtual environment activated"
    - "[ ] Dependencies installed"
    - "[ ] Environment variables configured"
    - "[ ] Copilot extension installed and authenticated"
  
  during_development:
    - "[ ] Write descriptive comments before code"
    - "[ ] Use type hints consistently"
    - "[ ] Include error handling in suggestions"
    - "[ ] Test Copilot suggestions before accepting"
  
  post_development:
    - "[ ] Review code for security issues"
    - "[ ] Add comprehensive docstrings"
    - "[ ] Write unit tests with Copilot assistance"
    - "[ ] Document any custom patterns used"

resources:
  documentation:
    - "GitHub Copilot Documentation: https://docs.github.com/en/copilot"
    - "VS Code Copilot Guide: https://code.visualstudio.com/docs/editor/github-copilot"
  
  trading_bot_specific:
    - "README_paper_trader.md: Project setup and usage"
    - "requirements.txt: Python dependencies"
    - "paper_trader/: Main codebase structure"
  
  support:
    - "GitHub Copilot Community: https://github.com/community/community/discussions/categories/copilot"
    - "Project Issues: Use GitHub Issues for project-specific problems"